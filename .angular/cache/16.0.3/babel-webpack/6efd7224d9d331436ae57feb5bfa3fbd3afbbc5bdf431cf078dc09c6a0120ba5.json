{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/forms\";\nclass PlotAddComponent {\n  constructor(plotService) {\n    this.plotService = plotService;\n  }\n  onSubmit() {\n    // Check if any required field is undefined\n    if (this.plotName === undefined || this.plotSize === undefined || this.plotLocation === undefined) {\n      console.error('Please fill in all required fields');\n      return;\n    }\n    // Create a new plot object with the form values\n    const newPlot = {\n      name: this.plotName,\n      area: this.plotSize,\n      location: this.plotLocation,\n      id: 0\n    };\n    // Call the plot service to add the plot\n    this.plotService.addPlot(newPlot).subscribe(() => {\n      // Plot added successfully, perform any additional actions if needed\n      console.log('Plot added successfully');\n    }, error => {\n      // Error occurred while adding the plot, handle the error\n      console.error('Error adding plot:', error);\n    });\n    // Reset the form values\n    this.resetForm();\n  }\n  resetForm() {\n    this.plotName = undefined;\n    this.plotSize = undefined;\n    this.plotLocation = undefined;\n  }\n}\nPlotAddComponent.ɵfac = function PlotAddComponent_Factory(t) {\n  return new (t || PlotAddComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n};\nPlotAddComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PlotAddComponent,\n  selectors: [[\"app-plot-add\"]],\n  decls: 17,\n  vars: 3,\n  consts: [[3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"plotName\"], [\"type\", \"text\", \"id\", \"plotName\", \"name\", \"plotName\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"plotSize\"], [\"type\", \"number\", \"id\", \"plotSize\", \"name\", \"plotSize\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"plotLocation\"], [\"type\", \"text\", \"id\", \"plotLocation\", \"name\", \"plotLocation\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"]],\n  template: function PlotAddComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Add Plot\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function PlotAddComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Plot Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function PlotAddComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.plotName = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Plot Size\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function PlotAddComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.plotSize = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 1)(12, \"label\", 6);\n      i0.ɵɵtext(13, \"Plot Location\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"input\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function PlotAddComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.plotLocation = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"button\", 8);\n      i0.ɵɵtext(16, \"Add Plot\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.plotName);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.plotSize);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.plotLocation);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { PlotAddComponent };","map":{"version":3,"names":["PlotAddComponent","constructor","plotService","onSubmit","plotName","undefined","plotSize","plotLocation","console","error","newPlot","name","area","location","id","addPlot","subscribe","log","resetForm","i0","ɵɵdirectiveInject","i1","ApiService","selectors","decls","vars","consts","template","PlotAddComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PlotAddComponent_Template_form_ngSubmit_2_listener","PlotAddComponent_Template_input_ngModelChange_6_listener","$event","PlotAddComponent_Template_input_ngModelChange_10_listener","PlotAddComponent_Template_input_ngModelChange_14_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\angular\\irrigation\\src\\app\\plot-add\\plot-add.component.ts","C:\\angular\\irrigation\\src\\app\\plot-add\\plot-add.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Plot } from '../Plot.model';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-plot-add',\n  templateUrl: './plot-add.component.html',\n  styleUrls: ['./plot-add.component.css']\n})\nexport class PlotAddComponent {\n  plotName?: string;\n  plotSize?: number;\n  plotLocation?: string;\n\n  constructor(private plotService: ApiService) {}\n\n  onSubmit() {\n    // Check if any required field is undefined\n    if (this.plotName === undefined || this.plotSize === undefined || this.plotLocation === undefined) {\n      console.error('Please fill in all required fields');\n      return;\n    }\n\n    // Create a new plot object with the form values\n    const newPlot: Plot = {\n      name: this.plotName,\n      area: this.plotSize,\n      location: this.plotLocation,\n      id: 0\n    };\n\n    // Call the plot service to add the plot\n    this.plotService.addPlot(newPlot).subscribe(\n      () => {\n        // Plot added successfully, perform any additional actions if needed\n        console.log('Plot added successfully');\n      },\n      (error) => {\n        // Error occurred while adding the plot, handle the error\n        console.error('Error adding plot:', error);\n      }\n    );\n\n    // Reset the form values\n    this.resetForm();\n  }\n\n  resetForm() {\n    this.plotName = undefined;\n    this.plotSize = undefined;\n    this.plotLocation = undefined;\n  }\n}","<h2>Add Plot</h2>\n\n<form (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <label for=\"plotName\">Plot Name</label>\n    <input type=\"text\" id=\"plotName\" name=\"plotName\" [(ngModel)]=\"plotName\" required>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"plotSize\">Plot Size</label>\n    <input type=\"number\" id=\"plotSize\" name=\"plotSize\" [(ngModel)]=\"plotSize\" required>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"plotLocation\">Plot Location</label>\n    <input type=\"text\" id=\"plotLocation\" name=\"plotLocation\" [(ngModel)]=\"plotLocation\" required>\n  </div>\n\n  <button type=\"submit\">Add Plot</button>\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}