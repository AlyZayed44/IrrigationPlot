{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction PlotListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function PlotListComponent_div_0_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const plot_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deletePlot(plot_r1.id));\n    });\n    i0.ɵɵtext(9, \"Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function PlotListComponent_div_0_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const plot_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updatePlot(plot_r1.id));\n    });\n    i0.ɵɵtext(11, \"Update\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const plot_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(plot_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Area: \", plot_r1.area, \" sq. meters\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Location: \", plot_r1.location, \"\");\n  }\n}\nclass PlotListComponent {\n  constructor(apiService, router) {\n    this.apiService = apiService;\n    this.router = router;\n    this.plots = [];\n  }\n  ngOnInit() {\n    this.getPlots();\n  }\n  getPlots() {\n    this.apiService.getPlots().subscribe(plots => {\n      this.plots = plots;\n    }, error => {\n      console.log('Error retrieving plots:', error);\n    });\n  }\n  deletePlot(plotId) {\n    this.apiService.deletePlot(plotId).subscribe(() => {\n      console.log('Plot deleted successfully.');\n      this.getPlots();\n    }, error => {\n      console.log('Error deleting plot:', error);\n    });\n  }\n  updatePlot(plotId) {\n    this.router.navigate(['/plots/', plotId, 'edit']);\n  }\n}\nPlotListComponent.ɵfac = function PlotListComponent_Factory(t) {\n  return new (t || PlotListComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.Router));\n};\nPlotListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PlotListComponent,\n  selectors: [[\"app-plot-list\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"plot-item\"], [3, \"click\"]],\n  template: function PlotListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PlotListComponent_div_0_Template, 12, 3, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.plots);\n    }\n  },\n  dependencies: [i3.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { PlotListComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PlotListComponent_div_0_Template_button_click_8_listener","restoredCtx","ɵɵrestoreView","_r3","plot_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","deletePlot","id","PlotListComponent_div_0_Template_button_click_10_listener","ctx_r4","updatePlot","ɵɵadvance","ɵɵtextInterpolate","name","ɵɵtextInterpolate1","area","location","PlotListComponent","constructor","apiService","router","plots","ngOnInit","getPlots","subscribe","error","console","log","plotId","navigate","ɵɵdirectiveInject","i1","ApiService","i2","Router","selectors","decls","vars","consts","template","PlotListComponent_Template","rf","ctx","ɵɵtemplate","PlotListComponent_div_0_Template","ɵɵproperty"],"sources":["C:\\angular\\irrigation\\src\\app\\plot-list\\plot-list.component.ts","C:\\angular\\irrigation\\src\\app\\plot-list\\plot-list.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Plot } from '../Plot.model';\nimport { ApiService } from '../api.service';\n\n@Component({\n  selector: 'app-plot-list',\n  templateUrl: './plot-list.component.html',\n  styleUrls: ['./plot-list.component.css']\n})\nexport class PlotListComponent {\n  plots: Plot[] = [];\n\n  constructor(private apiService: ApiService, private router: Router) { }\n\n  ngOnInit() {\n    this.getPlots();\n  }\n\n  getPlots() {\n    this.apiService.getPlots().subscribe(\n      plots => {\n        this.plots = plots;\n      },\n      (      error: any) => {\n        console.log('Error retrieving plots:', error);\n      }\n    );\n  }\n\n  deletePlot(plotId: number) {\n    this.apiService.deletePlot(plotId).subscribe(\n      () => {\n        console.log('Plot deleted successfully.');\n        this.getPlots();\n      },\n      (      error: any) => {\n        console.log('Error deleting plot:', error);\n      }\n    );\n  }\n\n  updatePlot(plotId: number) {\n    this.router.navigate(['/plots/', plotId, 'edit']);\n  }\n}\n\n","<div *ngFor=\"let plot of plots\">\n    <div class=\"plot-item\">\n      <h3>{{ plot.name }}</h3>\n      <p>Area: {{ plot.area }} sq. meters</p>\n      <p>Location: {{ plot.location }}</p>\n      <button (click)=\"deletePlot(plot.id)\">Delete</button>\n      <button (click)=\"updatePlot(plot.id)\">Update</button>\n    </div>\n  </div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}